from app.handlers.router import router
import asyncio
import logging
import random
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram import F
from aiogram.fsm.context import FSMContext

from app.keyboards import inline as inline_keyboards

from app.states.states import Expense, Income

from app.handlers.templates import default_expenses, default_incomes

from aiogram.types import BufferedInputFile

from app.requests.get_cat_error import get_cat_error_async as get_cat_error
from app.requests.login import login
from app.requests.delete_account import delete_account
from app.requests.get_categories import get_categories
from app.requests.get_text_report import get_text_report
from app.requests.get_visual_report import get_visual_report


#TODO –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–¥–æ–∫
#TODO —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ –∏ –ø–∞—Å—Å–∏–≤–æ–≤
#TODO –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π 
#TODO —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π

#===========================================================================================================================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
#===========================================================================================================================

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    data = await login(telegram_id=message.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await message.reply("–ü—Ä–∏–≤–µ—Ç! üëã")
    await message.reply("–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
    await message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await set_user_info(message=message, state = state)

@router.callback_query(F.data == "restart")
async def callback_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    data = await login(telegram_id=callback.from_user.id)
    if data is None:
        logging.error("Error while logging in")
        await callback.message.answer("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", reply_markup=inline_keyboards.restart)
        return
    await state.update_data(telegram_id = data.get("telegram_id"))
    await callback.message.reply("–ü—Ä–∏–≤–µ—Ç! üëã")
    await callback.message.reply("–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")
    await callback.message.answer("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(text="–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –≤–µ—Å—Ç–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –±—é–¥–∂–µ—Ç üìö\n\n–û–Ω –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–Ω–µ–≤–Ω–∏–∫–æ–º –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n\n–í–∞–º —Ç–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –û–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'\n\n–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ –µ–º—É: @dianabol_metandienon_enjoyer", reply_markup=inline_keyboards.home)
@router.message(Command("contacts"))
async def cmd_contacts(message: Message):
    text = "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù\n\n[GitHub](https://github.com/Segun228)"
    await message.reply(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')

@router.callback_query(F.data == "contacts")
async def contacts_callback(callback:CallbackQuery):
    text = "–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ–º: üìû\n\n\\@dianabol\\_metandienon\\_enjoyer ü§ù\n\n[GitHub](https://github.com/Segun228)"
    await callback.message.edit_text(text=text, reply_markup=inline_keyboards.home, parse_mode='MarkdownV2')
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback:CallbackQuery):
    await callback.message.edit_text("–Ø –º–Ω–æ–≥–æ —á—Ç–æ —É–º–µ—é üëá", reply_markup=inline_keyboards.main)
    await callback.answer()

#===========================================================================================================================
# 
#===========================================================================================================================



#===========================================================================================================================
# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º
#===========================================================================================================================
@router.callback_query(F.data == "account_menu")
async def account_menu_callback(callback:CallbackQuery):
    await callback.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º?", reply_markup=inline_keyboards.account_menu)
    await callback.answer()

@router.callback_query(F.data == "delete_account_confirmation")
async def delete_account_confirmation_callback(callback:CallbackQuery):
    await callback.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å–∏ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ...", reply_markup=inline_keyboards.delete_account_confirmation_menu)
    await callback.answer()

@router.callback_query(F.data == "delete_account")
async def delete_account_callback(callback:CallbackQuery, state:FSMContext):
    await delete_account(telegram_id=callback.from_user.id)
    await state.clear()
    await callback.message.edit_text("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω", reply_markup=inline_keyboards.restart)
    await callback.answer()

#===========================================================================================================================
# –î–Ω–µ–≤–Ω–∏–∫ –∏ –∑–∞–ø–∏—Å–∏
#===========================================================================================================================

@router.callback_query(F.data == "diary_menu")
async def diary_menu_callback(callback:CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã –∏–ª–∏ –¥–æ—Ö–æ–¥—ã!", reply_markup=inline_keyboards.diary_menu)
    categories = await get_categories(telegram_id=callback.from_user.id)
    if categories is None:
        await state.update_data(expense_categories = default_expenses)
        await state.update_data(income_categories = default_incomes)
    else:
        await state.update_data(expense_categories = categories.get("expenses"))
        await state.update_data(income_categories = categories.get("incomes"))
    await callback.answer()


@router.callback_query(F.data == "expenses_menu")
async def expenses_menu_callback(callback:CallbackQuery):
    await callback.message.edit_text("–ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã –∏–ª–∏ –¥–æ—Ö–æ–¥—ã!", reply_markup=inline_keyboards.expenses_menu)
    await callback.answer()

@router.callback_query(F.data == "incomes_menu")
async def incomes_menu_callback(callback:CallbackQuery):
    await callback.message.edit_text("–ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã –∏–ª–∏ –¥–æ—Ö–æ–¥—ã!", reply_markup=inline_keyboards.incomes_menu)
    await callback.answer()

#===========================================================================================================================
# –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
#===========================================================================================================================

@router.callback_query(F.data == "stats_menu")
async def stats_menu_callback(callback:CallbackQuery):
    await callback.message.edit_text("–ß—Ç–æ –±—É–¥–µ–º –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å?", reply_markup=inline_keyboards.stats_menu)
    await callback.answer()


@router.callback_query(F.data == "written_report")
async def written_report_callback(callback:CallbackQuery, state:FSMContext):
    stats_data = await get_text_report(telegram_id=callback.from_user.id)
    if stats_data is None:
        await callback.message.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –≤–∞–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", reply_markup=inline_keyboards.home)
        return
    total_expenses = stats_data['expenses']['total']['total_expenses']
    total_incomes = stats_data['incomes']['total']['total_incomes']
    total_profit = stats_data['profit']['total']['total_profit']
    
    total_year_expenses = stats_data['expenses']['total']['total_year_expenses']
    total_year_incomes = stats_data['incomes']['total']['total_year_incomes']
    total_year_profit = stats_data['profit']['total']['total_year_profit']
    
    total_month_expenses = stats_data['expenses']['total']['total_month_expenses']
    total_month_incomes = stats_data['incomes']['total']['total_month_incomes']
    total_month_profit = stats_data['profit']['total']['total_month_profit']
    
    max_month_expense = stats_data['expenses']['max_month_expense']
    max_year_expense = stats_data['expenses']['max_year_expense']
    max_expense = stats_data['expenses']['max_expense']
    ballance = stats_data['expenses']['ballance']
    message_text = (
        "üìä **–í–∞—à–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:**\n\n"
        "**–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**\n"
        f"üí∞ –ë–∞–ª–ª–∞–Ω—Å: `{ballance}`\n"
        f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–µ—Å—è—á–Ω–∞—è —Ç—Ä–∞—Ç–∞: `{max_month_expense}`\n"
        f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–æ–¥–æ–≤–∞—è —Ç—Ä–∞—Ç–∞: `{max_year_expense}`\n"
        f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Ç–∞: `{max_expense}`\n\n"
        "**–ò—Ç–æ–≥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:**\n"
        f"üí∞ –î–æ—Ö–æ–¥—ã: `{total_month_incomes}`\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥—ã: `{total_month_expenses}`\n"
        f"üìà –ü—Ä–∏–±—ã–ª—å: `{total_month_profit}`\n"
        "\n**–ò—Ç–æ–≥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥:**\n"
        f"üí∞ –î–æ—Ö–æ–¥—ã: `{total_year_incomes}`\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥—ã: `{total_year_expenses}`\n"
        f"üìà –ü—Ä–∏–±—ã–ª—å: `{total_year_profit}`\n\n"
        "**–û–±—â–∏–π –∏—Ç–æ–≥ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:**\n"
        f"üí∞ –î–æ—Ö–æ–¥—ã: `{total_incomes}`\n"
        f"üí∏ –†–∞—Å—Ö–æ–¥—ã: `{total_expenses}`\n"
        f"üìà –ü—Ä–∏–±—ã–ª—å: `{total_profit}`\n\n"
    )

    await callback.message.answer(message_text, reply_markup=inline_keyboards.text_report, parse_mode="MarkdownV2")

    all_expenses = stats_data['expenses']['records']['all_expenses_records']
    year_expenses = stats_data['expenses']['records']['last_year_expenses_records']
    month_expenses = stats_data['expenses']['records']['last_month_expenses_records']
    
    all_incomes = stats_data['incomes']['records']['all_income_records']
    year_incomes = stats_data['incomes']['records']['last_year_income_records']
    month_incomes = stats_data['incomes']['records']['last_month_income_records']
    await state.update_data(all_expenses = all_expenses)
    await state.update_data(year_expenses = year_expenses)
    await state.update_data(month_expenses = month_expenses)
    await state.update_data(all_incomes = all_incomes)
    await state.update_data(year_incomes = year_incomes)
    await state.update_data(month_incomes = month_incomes)
    await callback.answer()

@router.callback_query(F.data == "visual_report")
async def visual_report_callback(callback:CallbackQuery):
    image_bytes = await get_visual_report(telegram_id=callback.from_user.id)
    if image_bytes is None:
        logging.error("Failed to get visual report image from API.")
        await callback.message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç.", 
            reply_markup=inline_keyboards.report)
        await callback.answer()
        return

    photo_file = BufferedInputFile(image_bytes, filename="report.png")

    caption_text = "üìä –í–æ—Ç –≤–∞—à –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö!"
    await callback.message.answer_photo(
        photo=photo_file, 
        caption=caption_text, 
        reply_markup=inline_keyboards.report
    )

    await callback.answer()
#===========================================================================================================================
# –ó–∞–≥–ª—É—à–∫–∞
#===========================================================================================================================

@router.message()
async def all_other_messages(message: Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ üßê")
    photo_data = await get_cat_error()
    if photo_data:
        photo_to_send = BufferedInputFile(photo_data, filename="cat_error.jpg")
        await message.bot.send_photo(chat_id=message.chat.id, photo=photo_to_send)



async def set_user_info(message:Message, state:FSMContext):
    stats_data = await get_text_report(telegram_id=message.from_user.id)
    if stats_data is None:
        return

    all_expenses = stats_data['expenses']['records']['all_expenses_records']
    year_expenses = stats_data['expenses']['records']['last_year_expenses_records']
    month_expenses = stats_data['expenses']['records']['last_month_expenses_records']
    
    all_incomes = stats_data['incomes']['records']['all_income_records']
    year_incomes = stats_data['incomes']['records']['last_year_income_records']
    month_incomes = stats_data['incomes']['records']['last_month_income_records']
    await state.update_data(all_expenses = all_expenses)
    await state.update_data(year_expenses = year_expenses)
    await state.update_data(month_expenses = month_expenses)
    await state.update_data(all_incomes = all_incomes)
    await state.update_data(year_incomes = year_incomes)
    await state.update_data(month_incomes = month_incomes)